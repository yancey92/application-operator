该文件是我自己创建的，用于记录一些关键步骤，项目参考《Operator开发进阶》第7章
作者代码：https://github.com/daniel-hutao/Advanced-Kubernetes-Operator
不过，我在开发时候，按照作者的代码，遇到创建 CRD 时 kubectl 版本和 k8s 版本兼容问题，导致在创建CR时失败。
实际情况，请按照本人项目来测试。

1. 项目初始化：
    kubebuilder init --domain=xinyang.cn --repo=github.com/yancey92/application-operator --owner XinYang

2. 添加新的 API
    创建 Application 类型和对应的控制器：
    kubebuilder create api --group apps --version v1 --kind Application 
        INFO Create Resource [y/n] y
        INFO Create Controller [y/n] y
        ......
        Next: implement your new API and generate the manifests (e.g. CRDs,CRs) with: $ make manifests


3. 完善这个 API, 即完善 CRD
    ./api/v1/application_types.go 中完善你的资源结构体，通常是资源的 Spec、Status 的定义
    然后执行  make manifests 命令自动完善各种config目录下面的配置文件
        需要注意的：
            实际上是使用 controller-gen 命令来生成的
            如果你生成的CRD文件中缺少 metadata 的子属性，可以增加 crd:generateEmbeddedObjectMeta=true
            crd:maxDescLen：用于限制字段的描述信息的最大长度。 


4. 实现自定义资源的controller，即自定义资源的 Spec 字段的调谐 (reconcile) 流程
    internal/controller 下面
    

5. 设置Operator的 RBAC 权限

6. 过滤调谐事件

7. 给自定义资源起个别名
    在资源结构体的定义的上面增加下面一行，执行命令 make manifests 从新扫一下代码。
    然后，make install 这样就可以使用 kubectl get app 简短的名字了。
    +kubebuilder:resource:path=applications,singular=application,scope=Namespaced,shortName=app

8. 使用 webhook，实现资源的访问控制


9. API 多版本的支持

10. API 分组的支持

11. make run 本地启动 controller 调试
12. make docker-build IMG=application-operator:v0.0.1
13. 如果是Kind环境，将镜像load 进Kind 环境：
    kind load docker-image application-operator:v0.0.1 --name {cluster_name}
14. 部署 operator 控制器：make deploy IMG=application-operator:v0.0.1
